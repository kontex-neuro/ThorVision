{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Home","text":"Thor Vision  <p>     A GUI app for seamless control and video capture from USB cameras on the XDAQ AIO.      Homepage     |     Documentation </p> <p>Beta Version Notice</p> <p>This software is currently in beta. While it offers exciting features and functionality,  please be aware that it might contain bugs, performance issues, or incomplete features.  We greatly appreciate your feedback to help us improve.  If you encounter any issues, please report them on our GitHub Issues page.</p> <p>Thank you for being an early adopter and helping us shape the future of Thor Vision!</p> <p>  (coming soon)   (coming soon)</p>"},{"location":"index.html#features","title":"Features","text":"<ul> <li>Works automatically with the XDAQ AIO</li> <li>Record videos with embedded XDAQ metadata</li> <li>Record M-JPEG encoded videos</li> </ul> <p>Note</p> <ul> <li>Record H.265 encoded videos (coming soon)</li> <li>Synchronized recording with Open Ephys GUI and Intan RHX (coming soon)</li> <li>Trigger recording from hardware TTL inputs or via Brainwave simulator (coming soon)</li> </ul>"},{"location":"index.html#platforms","title":"Platforms","text":"<ul> <li>Windows</li> </ul> <p>Note</p> <p>Support for macOS and Ubuntu is in development (coming soon)</p>"},{"location":"FAQs.html","title":"Frequently Asked Questions","text":"<p>A collection of FAQs our customers find it helpful.</p>"},{"location":"FAQs.html#where-can-i-purchase-xdaq-aio","title":"Where can I purchase XDAQ AIO?","text":"<p>Please contact our support team via email at support@kontex.io or schedule a consultation through Calendly.</p>"},{"location":"FAQs.html#how-can-i-ensure-video-synchronization-between-usb-cameras-and-headstage-signals","title":"How can I ensure video synchronization between USB cameras and Headstage signals?","text":"<p>We provide detailed documentation on how we measure camera latency and post processing the camera frame with headstage signals acquire by Intan RHX or Open Ephys GUI.</p>"},{"location":"FAQs.html#why-arent-my-cameras-working","title":"Why aren't my cameras working?","text":"<p>If you're experiencing issues with USB cameras, please refer to our USB cameras documentation for troubleshooting steps and compatibility information.</p>"},{"location":"FAQs.html#the-app-crashed-what-should-i-do","title":"The app crashed. What should I do?","text":"<p>As the app is currently in beta, crashes may occur. If you experience a crash, please follow these steps:</p> <ol> <li>Restart the app and see if the issue is solved.</li> <li>Locate log files at: <code>C:/ProgramData/Thor Vision</code>.</li> <li>Report any bugs or issues on our GitHub Issues page, including relevant logs and details about the crash.</li> </ol> <p>Your feedback helps us improve the software, and we highly appreciate bug reports.</p>"},{"location":"FAQs.html#how-can-i-provide-feature-suggestions-or-contribute-to-the-app","title":"How can I provide feature suggestions or contribute to the app?","text":"<p>We welcome feedback and feature suggestions! Please submit your ideas and feature requests on our GitHub Issues page.</p> <p>If you have any further questions or need additional assistance, feel free to contact us at support@kontex.io.</p>"},{"location":"camera-latency.html","title":"Camera Latency (coming soon)","text":""},{"location":"deployment.html","title":"Deployment","text":"<p>To successfully deploy the app, follow the steps outlined in Build the app. Then, generate the build files with the <code>-DCMAKE_INSTALL_PREFIX=\"./&lt;folder&gt;</code> option enabled, and compile the target with <code>package</code>.</p> <ol> <li> <p>Generate the build files with a custom installation directory: <pre><code>cmake -S . -B build/Release --preset conan-release -G \"Ninja\" -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=\"./&lt;folder&gt;\"\n</code></pre></p> </li> <li> <p>Build and package the app: <pre><code>cmake --build build/Release --preset conan-release --target package\n</code></pre></p> </li> </ol>"},{"location":"getting-started.html","title":"Getting Started","text":"<p>Welcome to the Thor Vision developer docs! This guide will walk you through building and deploying the app from source.</p>"},{"location":"getting-started.html#building-from-source","title":"Building from Source","text":"<p>Before you begin, ensure the following tools and dependencies are installed on your system:</p>"},{"location":"getting-started.html#install-build-tools","title":"Install Build Tools","text":"<ul> <li>CMake - Cross-platform build system generator<ul> <li>Download CMake 3.27 (or higher) installer from https://cmake.org/download/ and install it.</li> </ul> </li> <li>Conan - Software package manager for C++</li> <li>git - Version control system<ul> <li>Download git installer from https://git-scm.com/downloads/win and install it.</li> </ul> </li> <li>Ninja - Small build system with a focus on speed</li> <li>Python - Programming language<ul> <li>Download Python 3.12 (or higher) installer from https://www.python.org/downloads/ and install it with adding to PATH enabled.</li> </ul> </li> <li>Qt 6 - GUI framework for the app<ul> <li>Download Qt 6 installer from https://www.qt.io/download-dev and install it.</li> </ul> </li> <li>Visual Studio - C/C++ IDE and MSVC compiler for Windows<ul> <li>Download Visual Studio 2022 installer from https://visualstudio.microsoft.com/downloads/ and install it.</li> </ul> </li> </ul> <p>Note</p> <p>The build is done in Visual Studio 2022 Community with SDK version 10.0.22621.0 and Qt 6 Community Edition.</p>"},{"location":"getting-started.html#install-xdaq-libraries","title":"Install XDAQ Libraries","text":"<ul> <li><code>xdaqmetadata</code> - Required for parsing XDAQ Metadata</li> <li><code>libxvc</code> - Required for streaming cameras</li> </ul>"},{"location":"getting-started.html#build-xdaqmetadata","title":"Build xdaqmetadata","text":"<ol> <li> <p>Get the source code and go to project directory <pre><code>git clone https://github.com/kontex-neuro/xdaqmetadata.git\ncd xdaqmetadata\n</code></pre></p> </li> <li> <p>Create python virtual environment <code>.venv</code> in project directory and activate it <pre><code>py -m venv .venv\n.venv\\Scripts\\activate\n</code></pre></p> </li> <li> <p>Install Conan and ninja in <code>.venv</code> via pip <pre><code>pip install conan ninja\n</code></pre></p> </li> <li> <p>Install dependencies using Conan <pre><code>conan install . -b missing -pr:a &lt;profile&gt; -s build_type=Release\n</code></pre></p> </li> <li> <p>Generate the build files with CMake <pre><code>cmake -S . -B build/Release --preset conan-release -G \"Ninja\" -DCMAKE_BUILD_TYPE=Release\n</code></pre></p> </li> <li> <p>Build the project <pre><code>cmake --build build/Release --preset conan-release\n</code></pre></p> </li> <li> <p>Export as conan package to local cache <pre><code>conan export-pkg . -pr:a &lt;profile&gt; -s build_type=Release\n</code></pre></p> </li> </ol> <p>Note</p> <p>Replace <code>&lt;profile&gt;</code> with the Conan profile from your environment, To see more about how to create Conan profile.</p> <p>Example Conan profile for Windows: <pre><code>[settings]\narch=x86_64\ncompiler=msvc\ncompiler.cppstd=20\ncompiler.runtime=dynamic\ncompiler.version=194\nos=Windows\n[conf]\ntools.cmake.cmaketoolchain:generator=Ninja\n</code></pre></p>"},{"location":"getting-started.html#build-libxvc","title":"Build libxvc","text":"<ol> <li> <p>Get the source code and go to project directory <pre><code>git clone https://github.com/kontex-neuro/libxvc.git\ncd libxvc\n</code></pre></p> </li> <li> <p>Create python virtual environment <code>.venv</code> in project directory and activate it <pre><code>py -m venv .venv\n.venv\\Scripts\\activate\n</code></pre></p> </li> <li> <p>Install Conan and ninja in <code>.venv</code> via pip <pre><code>pip install conan ninja\n</code></pre></p> </li> <li> <p>Install dependencies using Conan <pre><code>conan install . -b missing -pr:a &lt;profile&gt; -s build_type=Release\n</code></pre></p> </li> <li> <p>Generate the build files with CMake <pre><code>cmake -S . -B build/Release --preset conan-release -G \"Ninja\" -DCMAKE_BUILD_TYPE=Release\n</code></pre></p> </li> <li> <p>Build the project <pre><code>cmake --build build/Release --preset conan-release\n</code></pre></p> </li> <li> <p>Export as conan package to local cache <pre><code>conan export-pkg . -pr:a &lt;profile&gt; -s build_type=Release\n</code></pre></p> </li> </ol> <p>Build order</p> <p>Be sure to build <code>xdaqmetadata</code> first then <code>libxvc</code>, since <code>libxvc</code> is depended on <code>xdaqmetadata</code>.</p>"},{"location":"getting-started.html#build-the-app","title":"Build the app","text":"<p>Follow these steps to build the app from source:</p> <ol> <li> <p>Get the source code and go to project directory <pre><code>git clone https://github.com/kontex-neuro/ThorVision.git\ncd ThorVision\n</code></pre></p> </li> <li> <p>Create python virtual environment <code>.venv</code> in project directory and activate it <pre><code>py -m venv .venv\n.venv\\Scripts\\activate\n</code></pre></p> </li> <li> <p>Install Conan and ninja in <code>.venv</code> via pip <pre><code>pip install conan ninja\n</code></pre></p> </li> <li> <p>Install dependencies using Conan <pre><code>conan install . -b missing -pr:a &lt;profile&gt; -s build_type=Release\n</code></pre></p> </li> <li> <p>Generate the build files with CMake <pre><code>cmake -S . -B build/Release --preset conan-release -G \"Ninja\" -DCMAKE_BUILD_TYPE=Release\n</code></pre></p> </li> <li> <p>Build the project <pre><code>cmake --build build/Release --preset conan-release\n</code></pre></p> </li> </ol>"},{"location":"getting-started.html#building-the-docs-optional","title":"Building the docs (Optional)","text":"<p>Before you begin, ensure the following tools are installed on your system:</p> <ul> <li>Python</li> <li>MkDocs with <code>mkdocs-material</code>, <code>pymdown-extensions</code> and <code>mkdocstrings</code> <pre><code>pip install mkdocs mkdocs-material pymdown-extensions mkdocstrings\n</code></pre></li> </ul> <p>First generate build files using <code>CMake</code> with the <code>-DBUILD_DOC=ON</code> option enabled. Then compile the target <code>doc</code>, for example:</p> <pre><code>cmake --build build/Release --preset conan-release --target doc\n</code></pre> <p>This will generate documentation in <code>&lt;project_directory&gt;/build/Release/site</code>.</p>"},{"location":"post-processing.html","title":"Post Processing (coming soon)","text":""},{"location":"usb-cameras.html","title":"USB Cameras (coming soon)","text":""},{"location":"usb-cameras.html#camera-compatibility","title":"Camera compatibility","text":""},{"location":"user-manual.html","title":"User Manual","text":""},{"location":"user-manual.html#overview","title":"Overview","text":"<p>Thor Vision is a GUI app designed for seamless control and video capture from USB cameras on the XDAQ AIO. This user manual provides instructions on how to use the features of the application effectively.</p> <pre><code>graph LR;\n    subgraph PC[\"PC (Windows)\"]\n        TV(Thor Vision GUI)\n        subgraph DA[Data Acquisition Software]\n            RHX(Intan RHX)\n            OE(Open Ephys GUI)\n        end\n    end\n\n    XDAQ(XDAQ AIO)\n\n    subgraph CAMS[Cameras]\n        CAM1(Camera 1)\n        CAM2(Camera 2)\n        CAM3(Camera 3)\n        CAM4(Camera 4)\n    end\n\n    subgraph XH[X-Headstage]\n        x6R1(x6R)\n        x6R2(x6R)\n        x6R3(x6R)\n        x6R4(x6R)\n    end\n\n    XDAQ --&gt;|Thunderbolt| PC;\n    CAM1 --&gt;|USB| XDAQ;\n    CAM2 --&gt;|USB| XDAQ;\n    CAM3 --&gt;|USB| XDAQ;\n    CAM4 --&gt;|USB| XDAQ;\n\n    x6R1 --&gt;|HDMI| XDAQ;\n    x6R2 --&gt;|HDMI| XDAQ;\n    x6R3 --&gt;|HDMI| XDAQ;\n    x6R4 --&gt;|HDMI| XDAQ;\n\n    click XDAQ \"https://kontex.io/pages/xdaq\" \"Go to XDAQ page\" _blank\n    click RHX \"https://intantech.com/RHX_software.html\" \"Go to Intan RHX page\" _blank\n    click OE \"https://open-ephys.org/gui\" \"Go to Open Ephys GUI page\" _blank\n    click TV \"https://github.com/kontex-neuro/ThorVision\" \"Go to Thor Vision GUI page\" _blank</code></pre>"},{"location":"user-manual.html#hardware-requirements","title":"Hardware Requirements","text":"<ul> <li>PC: Windows with a Thunderbolt 3.0 port or higher.</li> <li>XDAQ AIO.</li> <li>Thunderbolt 3.0 Cable (or higher).</li> <li>USB Cameras: Compatible with XDAQ.</li> </ul> <p>Note</p> <p>Support for macOS and Ubuntu is in development (coming soon)</p>"},{"location":"user-manual.html#installation","title":"Installation","text":"<p>  (coming soon)   (coming soon)</p>"},{"location":"user-manual.html#user-interface-overview","title":"User Interface Overview","text":""},{"location":"user-manual.html#1-record","title":"1. Record","text":"<p>Press the button to record videos with embedded XDAQ metadata.</p>"},{"location":"user-manual.html#2-camera-list","title":"2. Camera List","text":"<p>View and live stream cameras on the XDAQ AIO.</p>"},{"location":"user-manual.html#3-server-status","title":"3. Server status","text":"<p>Display current server status on the XDAQ AIO.</p>"},{"location":"user-manual.html#4-record-settings","title":"4. Record Settings","text":"<p>Open the record settings window for advanced configuration options.</p>"},{"location":"user-manual.html#record-settings","title":"Record Settings","text":""},{"location":"user-manual.html#1-cameras-recording-settings","title":"1. Cameras Recording Settings","text":"<p>Choose either <code>Continuous</code> or <code>Trigger on</code> to record camera.</p> <ul> <li>Continuous: Start recording by pressing the <code>REC</code> button.</li> <li>Trigger on: Start recording from hardware TTL or via the Brainwave simulator. </li> </ul> <p>Note</p> <p><code>Trigger on</code> option is in development (coming soon)</p>"},{"location":"user-manual.html#2-record-pathfolder-name","title":"2. Record Path/Folder Name","text":"<ul> <li>Record Path: Click <code>...</code> to select the folder for saving recordings, or manually enter the directory path.</li> <li>Folder Name: Choose between:<ul> <li>Auto Automatically generated folder name in <code>YYYY-MM-DD_HH-MM-SS</code> format.</li> <li>Custom: Specify a custom folder name.</li> </ul> </li> </ul> <p>Note</p> <p>The default record directory is <code>C:/Users/&lt;user_name&gt;/Documents/Thor Vision/</code>.</p>"},{"location":"user-manual.html#3-record-mode","title":"3. Record Mode","text":"<p>Choose either <code>Continuous</code> or <code>Split record into</code> to record cameras.</p> <ul> <li>Continuous: Record a single, uninterrupted video file for the entire recording session.</li> <li>Split record into: Record multiple video files, each split into predefined segments (e.g., 5 seconds, 10 seconds).</li> </ul>"},{"location":"user-manual.html#camera-control","title":"Camera Control","text":""},{"location":"user-manual.html#1-stream-window","title":"1. Stream Window","text":"<p>View live streams from cameras on the XDAQ AIO.</p>"},{"location":"user-manual.html#2-xdaq-metadata","title":"2. XDAQ Metadata","text":"<p>Display live metadata from cameras on the XDAQ AIO.</p>"},{"location":"user-manual.html#3-camera-control-options","title":"3. Camera Control Options","text":""},{"location":"user-manual.html#1-startstop-stream","title":"1. Start/Stop Stream","text":"<p>Start or Stop the live stream from the camera.</p>"},{"location":"user-manual.html#2-resolution","title":"2. Resolution","text":"<p>Select a compatible resolution for the camera.</p>"},{"location":"user-manual.html#3-fps","title":"3. FPS","text":"<p>Select a compatible frame rate (FPS) for the camera.</p>"},{"location":"user-manual.html#4-codec","title":"4. Codec","text":"<p>Select a compatible codec for the camera.</p> <p>Tip</p> <p>Each camera has its own unique capabilities. Dimmed options for resolution, FPS, and codec indicate that the currently selected camera does not support these settings. However, these options remain clickable, and selecting them will reset the camera's current settings.</p>"},{"location":"user-manual.html#5-view","title":"5. View","text":"<p>Toggle to show or hide the camera view.</p>"},{"location":"user-manual.html#6-audio","title":"6. Audio","text":"<p>Note</p> <p><code>Audio</code> option is in development (coming soon)</p>"},{"location":"user-manual.html#log-files","title":"Log files","text":"<p>The app records all user actions, and logs are flushed flush every 10 seconds.</p>"},{"location":"user-manual.html#windows","title":"Windows","text":"<p>Log files are stored in <code>C:\\ProgramData\\Thor Vision\\</code>.</p>"},{"location":"user-manual.html#macos","title":"macOS","text":"<p>coming soon.</p>"},{"location":"user-manual.html#ubuntu","title":"Ubuntu","text":"<p>coming soon.</p>"},{"location":"xdaq-metadata.html","title":"XDAQ Metadata","text":"<pre><code>---\ntitle: Data Structure of XDAQ Metadata\n---\ngraph LR;\n    A(XDAQFrameData);\n    A --&gt;|64-bit| B(FPGA Timestamp);\n    A --&gt;|32-bit| C(Rhythm Timestamp);\n    A --&gt;|32-bit| D(TTL In);\n    A --&gt;|32-bit| E(TTL Out);\n    A --&gt;|32-bit| F(SPI Performance Counter);\n    A --&gt;|64-bit| G(Reserved);</code></pre> <p>XDAQ metadata is embedded into camera frames captured by XDAQ AIO and streamed live to a PC via Thunderbolt. Each recorded frame contains both the JPEG encoded image data and its associated XDAQ metadata.</p> <p>Note</p> <p>Record H.265 encoded videos (coming soon)</p>"}]}